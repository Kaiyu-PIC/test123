name: Build and Push Docker Image by var

# Controls when the workflow will run
on:
  push:
   tags:
     - '*' # Match tags starting with 'v'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches:
    - main
    - feature/*
    types: [closed] #only when merged happened. Other type: opened=opened, updated=synchronize.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # if: github.event.pull_request.merged == true || github.event_name == 'push'
    #    if: (!(github.event.action == 'closed' && github.event.pull_request.merged != true))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load BASE_VERSION from JSON variable
        env:
          JSON: ${{ vars.BRANCH_TO_VERSION }}
        run: |
          BRANCH="${{ github.ref_name }}"
      
          echo "BRANCH: $BRANCH"
          echo "JSON: $JSON"
      
          BASE_VERSION=$(echo "$JSON" | jq -r --arg branch "$BRANCH" '.[$branch] // empty')
      
          echo "Extracted BASE_VERSION: $BASE_VERSION"
      
          if [[ -z "$BASE_VERSION" ]]; then
            echo "Branch $BRANCH not handled"
            exit 1
          fi
      
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          echo "BASE_VERSION=$BASE_VERSION"

      - name: Fetch all tags
        run: git fetch --tags
      
      - name: Get latest tag
        id: get_tag
        run: |
          # Get target branch
          BRANCH=${{ github.ref_name }}
          BASE_VERSION="$BASE_VERSION"

          # Debugging output
          echo "BRANCH: $BRANCH"
          echo "^${BASE_VERSION}\.[0-9]+$"
          
          latest_tag=$(git tag --sort=-v:refname | grep -E "^${BASE_VERSION}\.[0-9]+$" | head -n 1)
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Increase version
        if: ((github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')
        #env:
        #  CURRENT_VERSION: ${{ env.latest_tag }}
        run: |
          # Extract version numbers
          MAJOR=$(echo "${{ env.latest_tag }}" | cut -d. -f1) # | tr -d 'v')
          MINOR=$(echo "${{ env.latest_tag }}" | cut -d. -f2)
          PATCH=$(echo "${{ env.latest_tag }}" | cut -d. -f3)

          # Ensure PATCH has a default value of 0 if it's empty
          PATCH=${PATCH:-0}
          
          # Increment the PATCH version
          NEW_PATCH=$((PATCH + 1))
          latest_tag="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "${MAJOR}.${MINOR}.${latest_tag}"
          echo "${latest_tag}"
          # Export the new version
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
          echo "The latest tag is ${{ env.latest_tag }}"
          
      - name: Create release
        if: ((github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.latest_tag }}
          release_name: Release ${{ env.latest_tag }}
          body: This release has been automatically generated by a GitHub Action
          draft: false
          prerelease: false
