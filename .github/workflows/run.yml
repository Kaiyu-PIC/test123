name: Build and Push Docker Image

# Controls when the workflow will run
on:
  push:
   tags:
     - '*' # Match tags starting with 'v'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches:
    - main
    - feature/*
    types: [closed] #only when merged happened. Other type: opened=opened, updated=synchronize.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # if: github.event.pull_request.merged == true || github.event_name == 'push'
    #    if: (!(github.event.action == 'closed' && github.event.pull_request.merged != true))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Fetch all tags
        run: git fetch --tags
      
      - name: Get latest tag
        id: get_tag
        run: |
          # 取得目前分支
          BRANCH=${{ github.ref_name }}
          
          # 設定初始版本
          case "$BRANCH" in
            "main") BASE_VERSION="0.0";;
            "feature/test") BASE_VERSION="0.1";;
            "feature/fun_B") BASE_VERSION="0.2";;
            *) echo "Branch $BRANCH not handled"; exit 1;;
          esac
          
          if [ -f "$BRANCH" ]; then
            latest_tag=$(git tag --sort=-v:refname | grep -E "^${BASE_VERSION}\.[0-9]+$" | head -n 1)
          else
            latest_tag=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags | head -n 1)
          fi
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
          # echo "The latest tag is ${{ env.latest_tag }}"
          echo $(git describe --tags `git rev-list --tags --max-count=1`)

      - name: Increase version
        if: ((github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')
        #env:
        #  CURRENT_VERSION: ${{ env.latest_tag }}
        run: |
          # Extract version numbers
          MAJOR=$(echo "${{ env.latest_tag }}" | cut -d. -f1) # | tr -d 'v')
          MINOR=$(echo "${{ env.latest_tag }}" | cut -d. -f2)
          PATCH=$(echo "${{ env.latest_tag }}" | cut -d. -f3)
          
          # Increment the PATCH version
          NEW_PATCH=$((PATCH + 1))
          latest_tag="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "${latest_tag}"
          # Export the new version
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
          echo "The latest tag is ${{ env.latest_tag }}"
          
      # - name: Create tag
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: 'refs/tags/${{ env.latest_tag }}',
      #         sha: context.sha
      #       })

      # - name: Add tags
      #   if: ((github.event.action == 'closed' && github.event.pull_request.merged == true))
      #   env: # Or as an environment variable
      #     super_secret: ${{ secrets.SuperSecret }}
      #   run: git tag -a ${{ env.latest_tag }} -m "This tag has been automatically generated by a GitHub Action"

      - name: Create release
        if: ((github.event.action == 'closed' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.latest_tag }}
          release_name: Release ${{ env.latest_tag }}
          body: This release has been automatically generated by a GitHub Action
          draft: false
          prerelease: false
